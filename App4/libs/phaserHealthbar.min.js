function mergeObjetcs(t, i) { for (var r in i) try { t[r] = i[r].constructor == Object ? mergeObjetcs(t[r], i[r]) : i[r] } catch (e) { t[r] = i[r] } return t } var HealthBar = function (t, i) { this.game = t, this.setupConfiguration(i), this.setPosition(this.config.x, this.config.y), this.drawBackground(), this.drawHealthBar(), this.setFixedToCamera(this.config.isFixedToCamera) }; HealthBar.prototype.constructor = HealthBar, HealthBar.prototype.setupConfiguration = function (t) { this.config = this.mergeWithDefaultConfiguration(t), this.flipped = this.config.flipped }, HealthBar.prototype.mergeWithDefaultConfiguration = function (t) { return mergeObjetcs({ width: 250, height: 40, x: 0, y: 0, bg: { color: "#651828" }, bar: { color: "#FEFF03" }, animationDuration: 200, flipped: !1, isFixedToCamera: !1 }, t) }, HealthBar.prototype.drawBackground = function () { var t = this.game.add.bitmapData(this.config.width, this.config.height); t.ctx.fillStyle = this.config.bg.color, t.ctx.beginPath(), t.ctx.rect(0, 0, this.config.width, this.config.height), t.ctx.fill(), this.bgSprite = this.game.add.sprite(this.x, this.y, t), this.bgSprite.anchor.set(.5) }, HealthBar.prototype.drawHealthBar = function () { var t = this.game.add.bitmapData(this.config.width, this.config.height); t.ctx.fillStyle = this.config.bar.color, t.ctx.beginPath(), t.ctx.rect(0, 0, this.config.width, this.config.height), t.ctx.fill(), this.barSprite = this.game.add.sprite(this.x - this.bgSprite.width / 2, this.y, t), this.barSprite.anchor.y = .5, this.flipped && (this.barSprite.anchor.x = 1, this.barSprite.position.x = this.bgSprite.position.x + this.config.width * this.bgSprite.anchor.x) }, HealthBar.prototype.setPosition = function (t, i) { this.x = t, this.y = i, void 0 !== this.bgSprite && void 0 !== this.barSprite && (this.bgSprite.position.x = t, this.bgSprite.position.y = i, this.barSprite.position.x = this.bgSprite.position.x - this.config.width * this.bgSprite.anchor.x, this.barSprite.position.y = i, this.flipped && (this.barSprite.position.x = this.bgSprite.position.x)) }, HealthBar.prototype.setPercent = function (t) { t < 0 && (t = 0), t > 100 && (t = 100); var i = t * this.config.width / 100; this.setWidth(i) }, HealthBar.prototype.setWidth = function (t) { this.game.add.tween(this.barSprite).to({ width: t }, this.config.animationDuration, Phaser.Easing.Linear.None, !0) }, HealthBar.prototype.setFixedToCamera = function (t) { this.bgSprite.fixedToCamera = t, this.barSprite.fixedToCamera = t }, HealthBar.prototype.setAnchor = function (t, i) { this.bgSprite.anchor.set(t, i), this.barSprite.position.x = this.bgSprite.position.x - this.config.width * this.bgSprite.anchor.x, this.barSprite.anchor.y = i, this.flipped && (this.barSprite.anchor.x = 1, this.barSprite.position.x = this.bgSprite.position.x) }, HealthBar.prototype.kill = function () { this.bgSprite.kill(), this.barSprite.kill() };